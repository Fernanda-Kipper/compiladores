PARSER_BEGIN(KarloffParser)
import java.io.*;
import java.util.ArrayList;


class Main{

  ArrayList<Command> commands;
  ArrayList<VarDecl> vars;

  Main(ArrayList<Command> commands, ArrayList<VarDecl> vars){
    this.commands = commands;
    this.vars = vars;
  }

  public String toString() {
    String bodyMain = "function main(){\n";
    
    for (VarDecl var : this.vars) {
      bodyMain = bodyMain.concat(var.toString());
    }

    for (Command command : this.commands) {
      bodyMain = bodyMain.concat(command.toString());
    }
    
    if (!bodyMain.endsWith("\n")){
      bodyMain = bodyMain + "\n";
    }

    return bodyMain + "}\n";
  }
}

class FunctionDecl{
  String name;
  ArrayList<Command> commands;
  ArrayList<VarDecl> vars;
  ArrayList<Parameter> parameters;

  FunctionDecl(String name, ArrayList<Command> commands, ArrayList<VarDecl> vars, ArrayList<Parameter> parameters){
    this.name = name;
    this.commands = commands;
    this.vars = vars;
    this.parameters = parameters;
  }

  public String toString() {
    String bodyFun = "function " + this.name + "(";

    if (!this.parameters.isEmpty()) {
      
      Parameter first = this.parameters.remove(0);
      bodyFun = bodyFun.concat(first.toString());
      
      for (Parameter parameter : this.parameters) {
        bodyFun = bodyFun.concat("," + parameter.toString());
      }
    }

    bodyFun = bodyFun.concat(") {\n");

    for (VarDecl var : this.vars) {
      bodyFun = bodyFun.concat(var.toString());
    }

    for (Command command : this.commands) {
      bodyFun = bodyFun.concat(command.toString());
    }

    if (!bodyFun.endsWith("\n")){
      bodyFun = bodyFun + "\n";
    }
    
    return bodyFun + "}\n";
  }
}

class VarDecl {
  String typo;
  String id;

  VarDecl(String typo, String id){
    this.typo = typo;
    this.id = id;
  }

  public String toString(){
    return "".concat("let " + this.id + ";\n");
  }
}

class Parameter {
  String typo;
  String id;

  Parameter(String typo, String id){
    this.typo = typo;
    this.id = id;
  }
    public String toString(){
    return typo.concat(" " + this.id);
  }
}

class Command {}

class Atrib extends Command {
  String id;
  Expression exp;

  Atrib(String id, Expression exp){
    this.id = id;
    this.exp = exp;
  }

  public String toString() {
    return this.id + " = " + this.exp.toString() + ";\n";
  }
}

class PrintStatement extends Command {
  Expression exp;

  PrintStatement(Expression exp){
    this.exp = exp;
  }

  public String toString() {
    return "console.log(" + this.exp.toString() + ");\n";
  }
}

class ReadStatement extends Expression {
  ReadStatement(){}

  public String toString() {
    return "prompt();\n";
  }
}

class IfStatement extends Command {
  Expression exp;
  ArrayList<Command> commands;

  IfStatement(Expression exp, ArrayList<Command> commands){
    this.exp = exp;
    this.commands = commands;
  }

  public String toString() {
    String bodyIf = "if (" + this.exp.toString() + "){\n";

    for (Command command : this.commands) {
      bodyIf = bodyIf.concat(command.toString());
    }

    if (!bodyIf.endsWith("\n")){
      bodyIf = bodyIf + "\n";
    }

    return bodyIf + "}\n";
  }
}

class WhileStatement extends Command {
  Expression exp;
  ArrayList<Command> commands;

  WhileStatement(Expression exp, ArrayList<Command> commands){
    this.exp = exp;
    this.commands = commands;
  }

  public String toString() {
    String whileBody = "while (!(" + this.exp.toString() + ")){\n";
    
    for (Command command : this.commands) {
      whileBody = whileBody.concat(command.toString());
    }

    if (!whileBody.endsWith("\n")){
      whileBody = whileBody + "\n";
    }

    return whileBody + "}\n";
  }
}

class RepeatStatement extends Command {
  Expression exp;
  ArrayList<Command> commands;

  RepeatStatement(Expression exp, ArrayList<Command> commands){
    this.exp = exp;
    this.commands = commands;
  }

  public String toString() {
    String bodyRepeat = "repeat { \n";
    
    for (Command command : this.commands) {
      bodyRepeat = bodyRepeat.concat(command.toString());
    }

    bodyRepeat = bodyRepeat + "}\n";
    bodyRepeat = bodyRepeat + "until";
    bodyRepeat = bodyRepeat + "(!(" + this.exp.toString() + "))\n";

    return bodyRepeat;
  }
}

class ReturnStatement extends Command {
  Expression exp;

  ReturnStatement(Expression exp){
    this.exp = exp;
  }

  public String toString() {
    return "return " + this.exp.toString() + ";\n";
  }
}

class BooleanFactor extends Expression {
  String value;

  BooleanFactor(String value){
    this.value = value;
  }

  public String toString() {
    return this.value;
  }
}

class IntFactor extends Expression {
  String value;

  IntFactor(String value){
    this.value = value;
  }

  public String toString() {
    return this.value;
  }
}

class VariableFactor extends Expression {
  String value;

  VariableFactor(String value){
    this.value = value;
  }

  public String toString() {
    return this.value;
  }
}

class Operator {}

class Sum extends Operator {
  String op = "+";

  public String toString() {
    return this.op;
  }
}

class Sub extends Operator {
  String op = "-";

  public String toString() {
    return this.op;
  }
}

class Mult extends Operator {
  String op = "*";

  public String toString() {
    return this.op;
  }
}

class Div extends Operator {
  String op = "/";

  public String toString() {
    return this.op;
  }
}

class And extends Operator {
  String op = "&&";

  public String toString() {
    return this.op;
  }
}

class Or extends Operator {
  String op = "||";

  public String toString() {
    return this.op;
  }
}

class Bigger extends Operator {
  String op = ">";

  public String toString() {
    return this.op;
  }
}

class Smaller extends Operator {
  String op = "<";

  public String toString() {
    return this.op;
  }
}

class Compare extends Operator {
  String op = "==";

  public String toString() {
    return this.op;
  }
}

class Expression {}

class Operation extends Expression {
  Operator operator;
  Expression left, right;

  Operation(Operator operator, Expression left, Expression right){
    this.operator = operator;
    this.left = left;
    this.right = right;
  }

  public String toString() {
    return this.left.toString() + " " + this.operator.toString() + " " + this.right.toString(); 
  }
}

class KarloffTree {

  Main main;
  ArrayList<FunctionDecl> functions;

  KarloffTree(Main main, ArrayList<FunctionDecl> functions){
    this.main = main;
    this.functions = functions;
  }

  public String toString() {
    String body = "";
    body = body.concat(this.main.toString() + "\n");
    
    for (FunctionDecl fn : this.functions) {
      body = body.concat(fn.toString() + "\n");
    }

    body = body + "main();\n";
    
    return body;
  }
}

public class KarloffParser {

  public static void main(String args[]) throws ParseException, IOException, Exception {
    KarloffParser parser = new KarloffParser(new FileInputStream(args[0]));
    KarloffTree tree = parser.Karloff();

    generateCode(tree, "output.js");
  }

  public static void generateCode(KarloffTree tree, String filename) throws Exception {
    File file = new File(filename);

    FileOutputStream outputStream = new FileOutputStream(file);
    outputStream.write(tree.toString().getBytes());

    outputStream.close();
  }
}

PARSER_END(KarloffParser)

SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN:
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APAR: "(">
| <FPAR: ")">
| <BOOL: "bool">
| <INT: "integer">
| <VOID: "void">
| <FUNC: "func">
| <PLUS: "+">
| <MINUS: "-">
| <EQUALS: "==">
| <ATRIB: "=">
| <MINOR: "<">
| <MINOR_EQ: "<=">
| <MAJOR: ">">
| <MAJOR_EQ: ">=">
| <AND: "&">
| <OR: "|">
| <MUL: "*">
| <DIV: "/">
| <COMM: ",">
| <DOTCOMM: ";">
| <SYSOUT: "System.output">
| <SYSREAD: "System.readint">
| <RETURN: "return">
| <REPEAT: "repeat">
| <UNTIL: "until">
| <WHILE: "while">
| <IF: "if">
| <VAR: "newVar">
| <TRUE: "true">
| <FALSE: "false">
}

TOKEN:
{
  <NUM: (["0"-"9"])+>
  | <ID: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
}

KarloffTree Karloff():
{
  Main main = null;  
  ArrayList<FunctionDecl> functions = new ArrayList<FunctionDecl>();
}
{
  main=MainFunc()
  (Func(functions))*

  {return new KarloffTree(main,functions);}
}

Main MainFunc():
{
  ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
  ArrayList<Command> commands = new ArrayList<Command>();
}
{
  <VOID> <MAIN> <APAR> <FPAR> <ACHAVES>
  VarDecl(vars)
  (Statement(commands))*
  <FCHAVES>

  {return new Main(commands,vars);}
}

void Func(ArrayList<FunctionDecl> functions):
{
  Token name = null;
  ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
  ArrayList<Command> commands = new ArrayList<Command>();
  ArrayList<Parameter> parameters = new ArrayList<Parameter>();
}
{
  <FUNC> Type() name=<ID> <APAR> (ArgList(parameters))? <FPAR> <ACHAVES>
  VarDecl(vars)
  (Statement(commands))*
  <FCHAVES>
  {functions.add(new FunctionDecl(name.image,commands,vars,parameters));}
}

void ArgList(ArrayList<Parameter> parameters):
{
  Token id=null;
  String typo=null;
}
{
  typo=Type() id=<ID> {parameters.add(new Parameter(typo, id.image));} (ArgListRecursion(parameters))*
}

void ArgListRecursion(ArrayList<Parameter> parameters):
{
  Token id=null;
  String typo=null;
}
{
  <COMM> typo=Type() id=<ID> {parameters.add(new Parameter(typo, id.image));} ArgListRecursion(parameters)
}

void VarDecl(ArrayList<VarDecl> vars):
{
  Token id=null;
  String typo=null;
}
{
  (<VAR> typo=Type() id=<ID> <DOTCOMM>{vars.add(new VarDecl(typo,id.image));})*
}

String Type():
{
  Token typo = null;
}
{
  typo=<INT> {return typo.image;}
| typo=<BOOL> {return typo.image;}
| typo=<VOID> {return typo.image;}
}

void Statement(ArrayList<Command> commands):
{}
{
  (Assignment(commands) | PrintStatement(commands) | IfStatement(commands) | WhileStatement(commands) | RepeatStatement(commands) | ReturnStatement(commands))
  <DOTCOMM>
}

void Assignment(ArrayList<Command> commands):
{
  Token id = null;
  Expression exp = null;
}
{
  id=<ID> <ATRIB> exp=AssignmentExpression() {commands.add(new Atrib(id.image,exp));}
}

Expression AssignmentExpression():
{
  Expression exp = null;
}
{
  exp=Expression() { return exp; }
| (<SYSREAD> <APAR> <FPAR>) {return new ReadStatement();}
}

void PrintStatement(ArrayList<Command> commands):
{
  Expression exp = null;
}
{
  <SYSOUT> <APAR> exp=Expression() {commands.add(new PrintStatement(exp));} <FPAR>
}

void IfStatement(ArrayList<Command> commands):
{
  ArrayList<Command> insideCommands = new ArrayList<Command>();
  Expression exp = null;
}
{
  <IF> exp=Expression() <ACHAVES>
  (Statement(insideCommands))+
  <FCHAVES>
  {commands.add(new IfStatement(exp, insideCommands));}
}

void WhileStatement(ArrayList<Command> commands):
{
  ArrayList<Command> insideCommands = new ArrayList<Command>();
  Expression exp = null;
}
{
  <WHILE> exp=Expression() <ACHAVES>
  (Statement(insideCommands))+
  <FCHAVES>
  {commands.add(new WhileStatement(exp, insideCommands));}
}

void RepeatStatement(ArrayList<Command> commands):
{
  ArrayList<Command> insideCommands = new ArrayList<Command>();
  Expression exp = null;
}
{
  <REPEAT> <ACHAVES>
  (Statement(insideCommands))+
  <FCHAVES> <UNTIL> exp=Expression()
  {commands.add(new RepeatStatement(exp, insideCommands));}
}

void ReturnStatement(ArrayList<Command> commands):
{
  Expression exp;
}
{
  <RETURN> exp=Expression()
  {commands.add(new ReturnStatement(exp));}
}

Expression Expression():
{
  Expression left;
  Expression right;
  Expression exp;
  Operator op;
}
{
  (<APAR> left=PrimaryExpr() op=Op() right=PrimaryExpr() <FPAR>) {return new Operation(op, left, right);}
| exp=PrimaryExpr() {return exp;}
}

Expression PrimaryExpr():
{
  Token token = null;
}
{
  token=<NUM> {return new IntFactor(token.image);} 
| <TRUE> {return new BooleanFactor("true");} 
| <FALSE> {return new BooleanFactor("false");}
| token=<ID> {return new VariableFactor(token.image);}
}

Operator Op() :
{}
{
  <PLUS> {return new Sum();}
|   <MINUS> {return new Sub();}
|   <MUL> {return new Mult();}
|   <DIV> {return new Div();}
|   <AND> {return new And();}
|   <OR> {return new Or();}
|   <MAJOR> {return new Bigger();}
|   <MINOR> {return new Smaller();}
|   <EQUALS> {return new Compare();}
}